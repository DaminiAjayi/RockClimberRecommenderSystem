hist(College_data$perc.alumni)
hist(College_data$Top10perc)
hist(College_data$Books)
hist(College_data$Top10perc)
hist(College_data$perc.alumni)
plot(Model8)
Model9 <- lm(log(perc.alumni) ~ Top10perc+Books, College_data)
College_data$perc.alumni[College_data$perc.alumni = 0] <- 1
College_data$perc.alumni[College_data$perc.alumni == 0] <- 1
View(College_data$perc.alumni)
Model9 <- lm(log(perc.alumni) ~ Top10perc+Books, College_data)
par(mfrow = c(2, 2))
plot(Model9)
Model10 <- lm(log(perc.alumni) ~ log(Top10perc)+Books, College_data)
par(mfrow = c(2, 2))
plot(Model10)
Model10 <- lm(perc.alumni ~ log(Top10perc)+Books, College_data)
par(mfrow = c(2, 2))
Model10 <- lm(log(perc.alumni) ~ log(Top10perc)+Books, College_data)
par(mfrow = c(2, 2))
plot(Model10)
Model11 <- lm(perc.alumni ~ log(Top10perc)+Books, College_data)
par(mfrow = c(2, 2))
plot(Model10)
plot(Model11)
Model12 <- lm(perc.alumni ~ log(Top10perc)+log(Books), College_data)
par(mfrow = c(2, 2))
plot(Model12)
Model10 <- lm(log(perc.alumni) ~ log(Top10perc)+log(Books), College_data)
par(mfrow = c(2, 2))
plot(Model10)
Model10 <- lm(log(perc.alumni) ~ log(Top10perc)+Books, College_data)
par(mfrow = c(2, 2))
plot(Model10)
Model13 <- lm(log(perc.alumni) ~ log(Top10perc)+log(Books), College_data)
par(mfrow = c(2, 2))
plot(Model13)
Model8 <- lm(perc.alumni ~ Top10perc+Books, College_data)
par(mfrow = c(2, 2))
plot(Model8)
Model11 <- lm(perc.alumni ~ log(Top10perc)+Books, College_data)
par(mfrow = c(2, 2))
plot(Model11)
Model12 <- lm(perc.alumni ~ log(Top10perc)+log(Books), College_data)
par(mfrow = c(2, 2))
plot(Model12)
Model8 <- lm(perc.alumni ~ Top10perc+Books, College_data)
summary(Model8)
par(mfrow = c(2, 2))
plot(Model8)
College_data <- ISLR::College
View(College_data)
Model8 <- lm(perc.alumni ~ Top10perc+Books, College_data)
summary(Model8)
par(mfrow = c(2, 2))
new1 = data.frame(Top10perc=0.9,Books=650)
predict(Model8, new1, interval = "predict")
predict(Model8, new1)
summary(Model8)
vif(Model12)
vif(Model8)
summary(Model9)
summary(Model10)
summary(Model11)
summary(Model12)
summary(Model9)
summary(Model11)
summary(Model11)
summary(Model9)
summary(Model10)
summary(Model9)
par(mfrow = c(2, 2))
plot(Model9)
summary(Model10)
par(mfrow = c(2, 2))
plot(Model10)
summary(Model9)
summary(Model10)
summary(Model11)
summary(Model12)
summary(Model13)
summary(Model14)
Model14 <- lm(log(Personal) ~ Room.Board, College_data)
summary(Model14)
summary(Model7)
summary(Model14)
Model15 <- lm(log(Personal) ~ log(Room.Board), College_data)
summary(Model15)
Model14 <- lm(Personal ~ log(Room.Board), College_data)
Model14 <- lm(log(Personal) ~ Room.Board, College_data)
summary(Model14)
Model16 <- lm(Personal ~ log(Room.Board), College_data)
summary(Model16)
summary(Model7)
Model14 <- lm(log(Personal) ~ Room.Board, College_data)
summary(Model14)
summary(Model15)
summary(Model16)
summary(Model16)
summary(Model14)
summary(Model15)
glm1 <- glm(Private ~ perc.alumni, College_data, family=binomial)
summary(glm1)
glm2 <- glm(Private ~ perc.alumni+Grad.Rate, College_data, family=binomial)
summary(glm2)
library(dplyr)
library(tidyverse)
College_data <- College_data %>%
mutate(pred_prob_glm2 = predict(glm2, newdata = ., type="response")) %>%
mutate(pred_outcome_glm2 = ifelse(pred_prob_glm2 >= 0.5,1,0))
View(College_data)
xtabs(~dft+pred_outcome_model4, logistic)
logistic <- logistic %>%
mutate(pred_prob_model4 = predict(Model4, newdata=., type="response")) %>%
mutate(pred_outcome_model4 = ifelse(pred_prob_model4 >= 0.5,1,0))
logistic <- ISLR::Default
logistic <- logistic %>%
mutate(pred_prob_model4 = predict(Model4, newdata=., type="response")) %>%
mutate(pred_outcome_model4 = ifelse(pred_prob_model4 >= 0.5,1,0))
View(logistic)
xtabs(~dft+pred_outcome_model4, logistic)
Model4 <- glm(dft ~ balance+income+stdt, logistic, family=binomial)
logistic$dft[logistic$default == "Yes"] <- 1
logistic$dft[logistic$default == "No"] <- 0
logistic$stdt[logistic$student == "Yes"] <- 1
logistic$stdt[logistic$student == "No"] <- 0
Model4 <- glm(dft ~ balance+income+stdt, logistic, family=binomial)
summary(Model4)
logistic <- logistic %>%
mutate(pred_prob_model4 = predict(Model4, newdata=., type="response")) %>%
mutate(pred_outcome_model4 = ifelse(pred_prob_model4 >= 0.5,1,0))
xtabs(~dft+pred_outcome_model4, logistic)
xtabs(~Private+pred_outcome_glm2, College_data)
Hitters <- ISLR::Hitters
library(MASS)
library(leaps)
library(ISLR)
hitters <- Hitters
hitters <- na.omit(hitters) #remove n/a in hitters
hitters <- hitters[hitters$Hits>80,] #remove hitters that have hit the ball less than 80 times
Upper <- lm(Salary ~ AtBat+Hits+HmRun+Runs+Years+Errors+Assists+PutOuts+CHits, hitters)
Lower = lm(Salary~1,hitters)
Upper <- lm(Salary ~ AtBat+Hits+HmRun+Runs+Years+Errors+Assists+PutOuts+CHits, hitters)
fws = stepAIC(Lower,direction='forward', trace=TRUE,
scope=list(upper = Upper,lower= Lower))
summary(fws)
bws = stepAIC(Upper,direction = "backward", trace=TRUE)
summary(bws)
data <- mtcars
data <- datasets::mtcars
Model17 <- lm(mpg~wt+am+wt*am, data=mtcars)
summary(Model17)
struct(mtcars)
str(mtcars)
contrasts(mtcars$am)
contrasts(data$am)
View(data)
summary(Model17)
summary(Model17)
credit_data <- ISLR::Credit
set.seed(1)
View(credit_data)
View(credit_data)
str(credit_data)
View(credit_data)
Model18 <- lm(Rating ~ ID+Income+Limit+Rating+Cards+Age+
Education+Gender+Student+Married+Ethnicity+Balance,
data=credit_data, substet=train)
train <- sample(400,200)
Model18 <- lm(Rating ~ ID+Income+Limit+Rating+Cards+Age+
Education+Gender+Student+Married+Ethnicity+Balance,
data=credit_data, substet=train)
Model18 <- lm(Rating ~ ID+Income+Limit+Rating+Cards+Age+
Education+Gender+Student+Married+Ethnicity+Balance,
data=credit_data, subset=train)
Model18 <- lm(Rating ~ ID+Income+Limit+Rating+Cards+Age+Education+Gender+Student+Married+Ethnicity+Balance, data=credit_data, subset=train)
Model18 <- lm(Rating ~ ID+Income+Limit+Cards+Age+Education+Gender+Student+Married+Ethnicity+Balance, data=credit_data, subset=train)
train <- sample(400,200)
credit_data <- ISLR::Credit
set.seed(1)
View(credit_data)
train <- sample(400,200)
Model18 <- lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=credit_data, subset=train)
summary(Model18)
mean(Rating-predict(Model19, credit_data))[-train]^2
mean((Rating-predict(Model19, credit_data))[-train]^2)
mean((Rating~predict(Model19, credit_data))[-train]^2)
attach(credit_data)
mean((Rating-predict(Model19, credit_data))[-train]^2)
mean((Rating-predict(Model18, credit_data))[-train]^2)
set.seed(1)
glm.fit = glm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=credit_data)
cv.err=cv.glm(credit_data, glm.fit)
cv.err$delta
cv.err10 = cv.glm(credit_data, glm.fit, K=10)
cv.err10$delta
set.seed(1)
cv.err10 = cv.glm(credit_data, glm.fit, K=10)
cv.err10$delta
set.seed(1)
bootvalue <- boot(credit_data, glm.fit, R=100)
library(boot)
bootvalue <- boot(credit_data, glm.fit, R=100)
bootvalue <- boot(credit_data, statistic=rsq, R=100, formula=glm.fit)
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=credit_data ,subset =index)))
boot.fn=function (data) {
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=credit_data)))
}
boot(credit_data, boot.fn, 100)
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data)))
boot.fn=function (data) {
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data)))
}
boot(credit_data, boot.fn, 100)
boot(data, boot.fn, 100)
?boot
test <- sample(400,400)
index <- sample(400,400)
boot.fn=function (data, index) {
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data, subset=index)))
}
boot(data, boot.fn, 100)
boot(data, boot.fn, 100)
index <- credit_data[1:400]
boot.fn=function (data, index) {
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data, subset=index)))
}
boot(data, boot.fn, 100)
index <- [1:400]
index <- 1:400
boot.fn=function (data, index) {
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data, subset=index)))
}
boot(data, boot.fn, 100)
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data)))
boot.fn=function (data, index) {
data <- data[index,]
return (coef(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data)))
}
boot(data, boot.fn, 100)
summary(boot(data, boot.fn, 100))
return (mean(summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2)
}
summary(boot(data, boot.fn, 100))
mean()
boot.fn=function (data, index) {
return (mean(summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2)
}
summary(boot(data, boot.fn, 100))
mean()
boot.fn=function (data, index) {
return (mean(summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2)
}
summary(boot(data, boot.fn, 100))
mean()
return (summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2
}
summary(boot(data, boot.fn, 100))
mean()
boot.fn=function (data, index) {
return (mean(summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2)
}
summary(boot(data, boot.fn, 100))
mean()
boot.fn=function (data, index) {
data <- data[index,]
return mean(summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2)
}
return (mean(summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$residuals^2))
return (coeff(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data)))
summary(boot(data, boot.fn, 100)
summary(boot(data, boot.fn, 100))
boot(data, boot.fn, 100)
data=data))$coef
summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$coef
anova(sm)
sm <- summary(lm(Rating ~ ID+Income+Limit+Cards+Age+Education+
Gender+Student+Married+Ethnicity+Balance,
data=data))$coef
anova(sm)
summary(Model1)
Model2 <- lm(mpg ~ disp+hp+drat+wt+qsec, data)
summary(Model2)
install.packages("igraph")
install.packages("sna")
install.packages("tnet")
library(sna)
library(igraph)
g <- graph.ring(10)
g
sna_Graph <- graph (edges=c("A", "B", "A", "C",
"B", "C", "B", "D",
"C", "D", "C", "E",
"D", "F", "D", "G",
"E", "F", "E", "G",
"F", "G"), directed=FALSE)
plot(sna_Graph)
sna_Graph <- graph (edges=c("F", "G",
"E", "F", "E", "G",
"D", "F", "D", "G",
"C", "D", "C", "E",
"B", "C", "B", "D",
"A", "B", "A", "C"), directed=FALSE)
plot(sna_Graph)
sna_Graph <- graph (edges=c("A", "B", "A", "C",
"B", "C", "B", "D",
"C", "D", "C", "E",
"D", "F", "D", "G",
"E", "F", "E", "G",
"F", "G"), directed=FALSE)
plot(sna_Graph)
plot(sna_Graph)
sna_Graph <- graph (edges=c("A", "B", "A", "C",
"B", "C", "B", "D",
"C", "D", "C", "E",
"D", "F", "D", "G",
"E", "F", "E", "G",
"F", "G"), directed=FALSE)
plot(sna_Graph)
sna_Graph <- graph (edges=c("A", "B", "A", "C",
"B", "C", "B", "D",
"C", "D", "C", "E",
"D", "F", "D", "G",
"E", "F", "E", "G",
"F", "G"), directed=FALSE)
plot(sna_Graph)
shortest.paths(sna_Graph)
diameter(sna_Graph)
centralization(sna_Graph,degree,mode="graph")
degree
sum(sna_Graph)
library(sna)
gden(sna_Graph)
degree(sna_Graph)
sum(degree(sna_Graph))
centralization.degree(sna_Graph)$centralization
#centralization.degree(sna_Graph)$centralization
closeness.cent <- closeness(sna_Graph, mode="all")
closeness.cent
betweenness.cent <- betweenness(sna_Graph, mode="all")
#centralization.degree(sna_Graph)$centralization
closeness.cent <- closeness(sna_Graph, mode="C", "D", "E")
#centralization.degree(sna_Graph)$centralization
closeness.cent <- closeness(sna_Graph, mode="all")
betweenness.cent <- betweenness(sna_Graph)
betweenness.cent
install.packages(shiny)
install.packages('mongolite')
library('mongolite')
library(mongolite)
install.packages(mongolite)
install.packages("mongolite")
clear
library(mongolite)
install.packages("mongolite")
install.packages("openssl")
install.packages("mongolite")
library(openssl)
install.packages("mongolite")
install.packages("mongolite")
install.packages("mongolite")
install.packages("httr")
install.packages("jsonlite")
#library(mongolite)
library(httr)
library(jsonlite)
base <- "http://open.mapquestapi.com/geocoding/v1/address?key="
key <- "XIJS0al55bI7xLquiUOVudBOoyG2r8lY"
endpoint <- "location"
city <- "Houston"
paste(base,key,"&",endpoint,"=",city, sep="")
call1 <- paste(base,key,"&",endpoint,"=",city, sep="")
get_location <- GET(call, type = "basic"))
get_location <- GET(call, type = "basic")
get_location <- GET(call(), type = "basic")
call <- paste(base,key,"&",endpoint,"=",city, sep="")
get_location <- GET(call, type = "basic")
get_location
get_location_text <- content(get_location, "text")
get_location_json <- fromJSON(get_location_text, flatten = TRUE)
get_location_json
get_location_json$results$locations
long_lat <- get_location_json$results$locations
lat <- long_lat$displayLatLng.lat
lat
long_lat
lat <- long_lat$displayLatLng.lat[0]
lat
get_location_df <- as.data.frame(get_location_json)
as.data.frame.matrix(get_location_json)
location_df <- lapply(get_location_json, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
location_df
get_location_df <- as.data.frame(location_df)
require(RJSONIO)
json_data <- fromJSON(get_location_json, nullValue = NA)
json_data <- fromJSON(get_location_text, nullValue = NA)
asFrame <- do.call("rbind.fill", lapply(json_data, as.data.frame))
asFrame <- do.call("rbind.fill", lapply(location_df, as.data.frame))
install.packages("rjson")
business <- as.data.frame(t(sapply(get_location_json, fromJSON)))
View(location_df)
long_lat <- get_location_json$results$locations
long_lat
as.data.frame(get_location_json)
fromJSON(get_location_json) %>% as.data.frame
fromJSON(get_location_text) %>% as.data.frame
import dplyr
library() dplyr
library(dplyr)
fromJSON(get_location_text) %>% as.data.frame
fromJSON(get_location_text) %>% as.data.frame
location_df
location_df[0]
location_df[10]
long_lat <- get_location_json$results$locations
long_lat
type(long_lat)
typeof(long_lat)
as.data.frame(long_lat)
as.data.frame(long_lat)
long_lat_df <- as.data.frame(long_lat)
long_lat_df
View(long_lat_df)
long_lat_df[0]
latitude <- long_lat_df$latLng.lat[0]
latitude
long_lat_df$displayLatLng.lat[1]
longitude <- long_lat_df$displayLatLng.lng[1]
longitude
getgeo("Minneapolis")
list(longitude, latitude)
latitude
longitude
#Get longitude and latitude value (First county)
latitude <- long_lat_df$displayLatLng.lat[1]
latitude
longitude
list(longitude, latitude)
getgeo <- function(cityname){
# Creating parameters for the GET request
base <- "http://open.mapquestapi.com/geocoding/v1/address?key="
key <- "XIJS0al55bI7xLquiUOVudBOoyG2r8lY"
endpoint <- "location"
city <- cityname
# Creating API call string
call <- paste(base,key,"&",endpoint,"=",city, sep="")
# Make API request
get_location <- GET(call, type = "basic")
# Convert results to dataframe
get_location_text <- content(get_location, "text")
get_location_json <- fromJSON(get_location_text, flatten = TRUE)
long_lat <- get_location_json$results$locations
long_lat_df <- as.data.frame(long_lat)
#Get longitude and latitude value (First county)
latitude <- long_lat_df$displayLatLng.lat[1]
longitude <- long_lat_df$displayLatLng.lng[1]
return (list(longitude, latitude))
}
getgeo("Minneapolis")
devtools::install_github("jeroen/mongolite")
install.packages("devtools")
devtools::install_github("jeroen/mongolite")
install.packages("mongolite")
install.packages("mongolite")
library(mongolite)
library(shiny); runApp('Desktop/GT/CSE 6242/Project/ShinyR/RockClimbingApp.R')
library(shiny); runApp('Desktop/GT/CSE 6242/Project/ShinyR/RockClimbingApp.R')
library(shiny); runApp('Desktop/GT/CSE 6242/Project/ShinyR/RockClimbingApp.R')
library(shiny); runApp('Desktop/GT/CSE 6242/Project/ShinyR/RockClimbingApp.R')
